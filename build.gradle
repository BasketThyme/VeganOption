ext.config = loadConfig(file('build.properties'))

buildscript {
	repositories {
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
		classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.0.5"
	}
}
apply plugin: 'net.minecraftforge.gradle.forge'

minecraft {
	
	runDir = "${config.run_dir}"

	coreMod = "${config.core_mod}"

	version = "${config.forge_version}"
	
	mappings = "${config.mcp_mappings}"
	
	
	//replace "\${mod_name}", "${config.mod_name}"
	//replaceIn "ModInfo.java"
	
	//replace "\${mod_id}", "${config.mod_id}"
	//replaceIn "ModInfo.java"

	//replace "\${mod_version}", "${config.mod_version}"
	//replaceIn "ModInfo.java"
	
	//replace "\${required_mc_version}", "${config.minecraft_version}"
	//replaceIn "ModInfo.java"
	
	//replace "\${required_forge_version}", "${config.forge_version}"
	//replaceIn "ModInfo.java"
	
	//replace "\${required_jei_version}", "${config.jei_version}"
	//replaceIn "ModInfo.java"
	
	//replace "\${required_waila_version}", "${config.waila_version}"
	//replaceIn "ModInfo.java"
	
	//replace "\${required_theoneprobe_version}", "${config.theoneprobe_version}"
	//replaceIn "ModInfo.java"
}

sourceCompatibility = 1.6
targetCompatibility = 1.6

group = "${config.mod_group}"
archivesBaseName ="${config.mod_name}" + "-" + "${config.minecraft_version}" + "-" + "${config.forge_version}" 
version = "${config.mod_version}" 

if (version == "unspecified")
	version = "0.5.0"
if (System.getenv("BUILD_NUMBER") != null)
	version += (version ? "+" : "") + "${System.getenv("BUILD_NUMBER")}"
if (System.getenv("GIT_COMMIT") != null)
	version += (version ? "." : "") + "${System.getenv("GIT_COMMIT").take(5)}"

sourceSets.main.java.srcDirs += 'java'
sourceSets.main.java.srcDirs += 'apis'
sourceSets.main.resources.srcDirs += 'resources'
sourceSets.test.java.srcDirs += 'tests'

repositories {
	maven {
		url "http://mobiusstrip.eu/maven"
	}
	maven {
		url "http://dvs1.progwml6.com/files/maven"
	}
	maven {
		url "http://maven.tterrag.com/"
	}
}
 
dependencies {
	deobfCompile "mcjty.theoneprobe:TheOneProbe:" + "${config.theoneprobe_version}" + ":api"
	deobfCompile "mcp.mobius.waila:Waila:" + "${config.waila_version}"
	// compile against the JEI API
	deobfCompile "mezz.jei:jei_1.11.2:" + "${config.jei_version}" + ":api"
	// at runtime, use the full JEI jar
	runtime "mezz.jei:jei_1.11.2:" + "${config.jei_version}"

	testCompile 'junit:junit:4.11'
}

jar {
	manifest {
		attributes 'FMLCorePlugin': 'squeek.veganoption.asm.ASMPlugin'
		attributes 'FMLCorePluginContainsFMLMod': 'true'
	}
}

def getHeadCommitMessage() {
	def headProc = "git log -1 --format=%B".execute()
	headProc.waitForOrKill(1000)
	assert headProc.exitValue() == 0, headProc.err.text
	return headProc.in.text.trim()
}

def getLastTaggedCommit() {
	return getLastTaggedCommit(0)
}

def getLastTaggedCommit(int skip) {
	def lastTagProc = "git rev-list HEAD --tags --max-count=1 --no-walk --skip=$skip".execute()
	lastTagProc.waitForOrKill(1000)
	assert lastTagProc.exitValue() == 0, lastTagProc.err.text
	def lastTag = lastTagProc.in.text.trim()

	if (lastTag.equals(getHeadCommit()))
		return getLastTaggedCommit(1)
	else
		return lastTag
}

def getHeadCommit() {
	def headProc = "git rev-parse HEAD".execute()
	headProc.waitForOrKill(1000)
	assert headProc.exitValue() == 0, headProc.err.text
	return headProc.in.text.trim()
}

def getChangelogSince(String commitSHA, String format="- %B") {
	def changelog = ""
	def range = commitSHA.isEmpty() ? "HEAD" : "$commitSHA..HEAD"
	def cmd = ["git", "log", "--no-merges", "--format=$format", "$range"]
	def changelogProc = cmd.execute()
	changelogProc.in.eachLine { line ->
		if (!line.isEmpty()) {
			changelog += line + "\n"
		}
	}
	changelogProc.err.eachLine { line -> println line }
	return changelog
}

def sanitizeChangelog(String changelog) {
	def splitChangelog = changelog.split(/(^|\n)\- /)
	def sanitizedChangelog = ""
	splitChangelog.each { change ->
		if (!change.isEmpty() && !change.contains(":skip:"))
		sanitizedChangelog += "\n- " + change.replaceAll(/\n\n/) { match ->
			return "\n"
		}
	}
	return sanitizedChangelog
}

task changelog() << {
	def changelogFile = new File(project.buildDir.getPath() + '/changelog.md')
	if (!changelogFile.getParentFile().exists())
		changelogFile.getParentFile().mkdirs()
	changelogFile.delete()

	def lastTag = getLastTaggedCommit()
	def changelog = getChangelogSince(lastTag)
	def sanitizedChangelog = sanitizeChangelog(changelog)
	println sanitizedChangelog
	changelogFile << sanitizedChangelog
}

processResources {
	inputs.property "vars", project.version + project.minecraft.version
	from(sourceSets.main.resources.srcDirs) {
		include '**/*.info'
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}
	from(sourceSets.main.resources.srcDirs) {
		exclude '**/*.info'
	}
}

ext.curseApiKey = project.hasProperty('curseApiKey') ? curseApiKey : System.getenv("CURSE_API_KEY")
if (curseApiKey) {
	apply plugin: "com.matthewprenger.cursegradle"
	curseforge {
		apiKey = curseApiKey
		if (!getHeadCommitMessage().contains(":skip:")) {
			project {
				id = '227309'
				changelog = new File(project.buildDir.getPath() + '/changelog.md')
				changelogType = 'markdown'
				releaseType = project.version.contains("+") ? 'alpha' : (project.version.startsWith('0') ? 'beta' : 'release')
				addGameVersion project.minecraft.version
			}
		}
	}
}

static def loadConfig(File config) {
	def props = new Properties()
	config.withInputStream {
		stream -> props.load(stream)
	}
	return new ConfigSlurper().parse(props)
}